"""
Django settings for dja_badge_site project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-^4eo%dtc9hawz9=@3duzsu4vyv+n*!$j!bd^(v%gpi#50$a_+0')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', '') != 'False'

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS','localhost').split(',')
print("ALLOWED_HOSTS set: ")
print(ALLOWED_HOSTS)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'badge.apps.BadgeConfig',
    'csvexport',
    'bootstrap_italia_template',
    'sass_processor',
    'widget_tweaks',
    'django.forms',
    'django_filters',
    'django_python3_ldap',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dja_badge_site.urls'


FORM_RENDERER = 'django.forms.renderers.TemplatesSetting'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dja_badge_site.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# Update database configuration from $DATABASE_URL.
import dj_database_url
db_from_env = dj_database_url.config(conn_max_age=500)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
#con questa istruzione la configurazione di cconnessione a db viene overridata dalla variabile
# di environment DATABASE_URL es DATABASE_URL=postgres://username:somepassword@172.0.0.2/dbname
DATABASES['default'].update(db_from_env)

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'it-IT'

TIME_ZONE = 'Europe/Rome'

USE_I18N = True

USE_TZ = True




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'
#STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

#  mapping per url per le immagini e i file
MEDIA_URL = '/media/' 
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

JS_DEFAULT_DATE_FORMAT="dd/MM/yyyy"

DJANGO_BOOSTRAP_ITALIA_USE_CDN=False
DJANGO_BOOSTRAP_ITALIA_CDN= 'https://cdn.jsdelivr.net/npm/bootstrap-italia@2.0.9/dist'

if len(os.environ.get('CSRF_TRUSTED_ORIGINS',''))>0:
    print("CSRF_TRUSTED_ORIGINS from environment: "+os.environ.get('CSRF_TRUSTED_ORIGINS',''))    
    CSRF_TRUSTED_ORIGINS = os.environ.get('CSRF_TRUSTED_ORIGINS','').split(',')


############# L D A P   S E T T I N G S ####################
# aggiungere in environment:
#ENABLE_LDAP=True
#LDAP_AUTH_URL=ldap://hostldap:porta
#LDAP_AUTH_SEARCH_BASE="DC=xxxx,DC=yyyyy,DC=zzzzzz,DC=it"
#LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN=XXXXX
#LDAP_AUTH_CONNECTION_USERNAME=.....
#LDAP_AUTH_CONNECTION_PASSWORD=.....
#LDAP_FILTRO_RESTRIZIONE_UTENTI_AUTENTICABILI="(&(objectCategory=Person)(sAMAccountName=*)(memberOf=CN=UtentiRedmine,OU=Utenti senza OU,OU=Utenti,DC=comba,DC=comune,DC=bari,DC=it))"

if os.environ.get('ENABLE_LDAP','False')=='True':
    print("Enabling LDAP Authentication ...")
    AUTHENTICATION_BACKENDS=("django_python3_ldap.auth.LDAPBackend",
                            'django.contrib.auth.backends.ModelBackend',)
    # The URL of the LDAP server(s).  List multiple servers for high availability ServerPool connection.
    LDAP_AUTH_URL = [os.environ.get('LDAP_AUTH_URL')]
    # Initiate TLS on connection.
    LDAP_AUTH_USE_TLS = False
    # Specify which TLS version to use (Python 3.10 requires TLSv1 or higher)
    #import ssl
    #LDAP_AUTH_TLS_VERSION = ssl.PROTOCOL_TLSv1_2
    # The LDAP search base for looking up users.
    LDAP_AUTH_SEARCH_BASE = os.environ.get('LDAP_AUTH_SEARCH_BASE')
    # The LDAP class that represents a user.
    LDAP_AUTH_OBJECT_CLASS = "organizationalPerson"
    # User model fields mapped to the LDAP
    # attributes that represent them.
    LDAP_AUTH_USER_FIELDS = {
        "username": "sAMAccountName",
        "first_name": "givenName",
        "last_name": "sn",
        "email": "mail",
    }

    LDAP_AUTH_USER_LOOKUP_FIELDS = ("username",)
    LDAP_AUTH_CLEAN_USER_DATA = "django_python3_ldap.utils.clean_user_data"
    LDAP_AUTH_SYNC_USER_RELATIONS = "django_python3_ldap.utils.sync_user_relations"
    LDAP_AUTH_FORMAT_SEARCH_FILTERS = "django_python3_ldap.utils.format_search_filters"
    LDAP_AUTH_FORMAT_USERNAME = "django_python3_ldap.utils.format_username_active_directory"
    LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN = os.environ.get('LDAP_AUTH_ACTIVE_DIRECTORY_DOMAIN')
    LDAP_AUTH_CONNECTION_USERNAME = os.environ.get('LDAP_AUTH_CONNECTION_USERNAME')
    LDAP_AUTH_CONNECTION_PASSWORD = os.environ.get('LDAP_AUTH_CONNECTION_PASSWORD')
    LDAP_AUTH_FORMAT_SEARCH_FILTERS = "dja_badge_site.ldapfilter.custom_format_search_filters"


############# E N D   L D A P   S E T T I N G S ####################

#import logging
#logging.basicConfig(filename='client_application.log', level=logging.CRITICAL)
#from ldap3.utils.log import set_library_log_activation_level,set_library_log_detail_level, EXTENDED
#set_library_log_activation_level(logging.CRITICAL) 
#set_library_log_detail_level(EXTENDED)
